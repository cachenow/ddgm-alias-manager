name: Build and Push Docker image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
        default: 'latest'
      push_to_dockerhub:
        description: 'Push to Docker Hub'
        type: boolean
        required: true
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: github.event.inputs.push_to_dockerhub == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
        tags: |
          type=raw,value=${{ github.event.inputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDTIME=${{ github.sha }}
        no-cache: true

    - name: Clean up old images
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser({
            package_type: "container",
            package_name: context.repo.repo.toLowerCase()
          });
          for (const version of response.data) {
            if (version.metadata.container.tags.length === 0) {
              await github.rest.packages.deletePackageVersionForAuthenticatedUser({
                package_type: "container",
                package_name: context.repo.repo.toLowerCase(),
                package_version_id: version.id
              });
            }
          }
